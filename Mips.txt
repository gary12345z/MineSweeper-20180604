.text
.globl main 
#=================MAIN=================
main:
	addi $sp,$sp,-24
	sw $t0,0($sp)
	sw $t1,4($sp)
	sw $t2,8($sp)
	sw $t3,12($sp)
	sw $t4,16($sp)
	sw $t5,20($sp)
	jal SetMine
	jal CountMine
	li $t0,0
MainLoop:
	jal ShowBroad
	bne $v0,$zero,EndGame
	li $v0,4
	li $a0,askinput
	syscall
	li $v0,5
	syscall
	move $t1,$v0
	li $v0,5
	syscall
	move $t2,$v0
	sle $t3,$t1,$zero
	li $t5,BROAD_SIZE
	sgt $t4,$t1,$t5
	or $t3,$t3,$t4
	sle $t4,$t2,$zero
	or $t3,$t3,$t4
	sgt $t4,$t2,$t5
	or $t3,$t3,$t4
	bne $t3,$zero,InputCorrect
	li $v0,4
	li $a0,errorinput
	syscall
	j ExitIf
InputCorrect:
	move $a0,$t1
	move $a2,$t2
	jal Step
	move $t0,$vo
ExitIf:
	beq $t0,$zero,MainLoop
EndGame:
	beq $t0,$zero,NotLose
	jal ShowBroad
	li $v0,4
	li $a0,lose
	syscall
	j Exit
NotLose:
	li $v0,4
	li $a0,win
	syscall
Exit:
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	lw $t3,12($sp)
	lw $t4,16($sp)
	lw $t5,20($sp)
	addi $sp,$sp,24
	jr $ra
#=================SetMine=================
SetMine:
	addi $sp,$sp,-20
	sw $t0,0($sp)
	sw $t1,4($sp)
	sw $t2,8($sp)
	sw $t3,12($sp)
	sw $t4,16($sp)
Sec1:
	li $t0,0 
Loop1:
	li $t1,0
Loop2:
	muli $t2,$t0,SIZE
	add $t2,$t2,$t1
	sll $t2,$t2,2
	addu $t3,$t2,MineMap
	li $t4,-2
	sw $t4,0($t3) 
	addu $t3,$t2,GameBroad
	sw $zero,0($t3)
	addi $t1,$t1,1
	bne $t1,SIZE,Loop2
	addi $t0,$t0,1
	bne $t0,SIZE,Loop1

Sec2:
	li $t0,1 
Loop3:
	li $t1,1
Loop4:
	muli $t2,$t0,SIZE
	add $t2,$t2,$t1
	sll $t2,$t2,2
	addu $t3,$t2,MineMap
	sw $zero,0($t3)
	addi $t1,$t1,1
	ble $t1,BROAD_SIZE,Loop4
	addi $t0,$t0,1
	ble $t0,BROAD_SIZE,Loop3
	
Sec3:
	li $a1,15
	li $v0,40
	syscall
	li $t0,MINE_NUM    
Loop5:  
	li $a1,64
	li $v0,42
	syscall
	sll $t2,$a0,2
	add $t2,$t2,MineMap
	lw $t3,0($t2)
	bne $t3,$zero,IfNot1
	li $t3,-1
	sw $t3,0($t2)
	addi $t0,$t0,-1
IfNot1:
	bne $t0,$zero,Loop5
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	lw $t3,12($sp)
	lw $t4,16($sp)
	addi $sp,$sp,20
	jr $ra       
#=================CountMine=================   
CountMine:
	addi $sp,$sp,-16
	sw $t0,0($sp)
	sw $t1,4($sp)
	sw $t2,8($sp)
	sw $t3,12($sp)
	li $t0,1
Loop6:
	li $t1,1
Loop7:
	muli $t2,$t0,SIZE
	add $t2,$t2,$t1
	sll $t2,$t2,2
	addu $t2,$t2,MineMap
	lw $t3,0($t2)
	bne $t3,$zero,IfNot2
	move $a0,$t0
	move $a1,$t1
	jal Count
	sw $v0,0($t2)
IfNot2:
	addi $t1,$t1,1
	bne $t1,SIZE,Loop7
	addi $t0,$t0,1
	bne $t0,SIZE,Loop6
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	lw $t3,12($sp)
	addi $sp,$sp,16
	jr $ra   
#=================Count=================
Count:
	addi $sp,$sp,-12
	sw $t0 0($sp)
	sw $t1 4($sp)
	sw $t2 8($sp)
	li $t2,0
	addi $t0,$a0,-1
Loop8:
	addi $t1,$a1,-1
Loop9:
	muli $t3,$t0,SIZE
	add $t3,$t3,$t1
	sll $t3,$t3,2
	addu $t3,$t3,MineMap
	lw $t3,0($t3)
	li $t4 -1
	bne $t3,$t4,IfNot3
	addi $t2,$t2,1
IfNot3:
	addi $t1,$t1,1
	bne $t1,SIZE,Loop9
	addi $t0,$t0,1
	bne $t0,SIZE,Loop8
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	addi $sp,$sp,12
	jr $ra
#=================ShowBroad=================	
ShowBroad:
	addi $sp,$sp,-20
	sw $t0,0($sp)
	sw $t1,4($sp)
	sw $t2,8($sp)
	sw $t3,12($sp)
	sw $t4,16($sp)
	addi $sp,$sp,-12
	sw $t0,0($sp)
	sw $t1,4($sp)
	sw $t2,8($sp)
	li $t2,0
	li $t0,1
Loop10:
	li $t1,1
Loop11:
	muli $t3,$t0,SIZE
	add $t3,$t3,$t1
	sll $t3,$t3,2
	addu $t4,$t3,GameBroad
	lw $t4,0($t4)
	bne $t4,$zero,IfNot4
	li $v0,4
	li $a0,unopen
	syscall
	addi $t2,$t2,1
	j IfNot6
IfNot4:
	addu $t4,$t3,MineMap
	lw $t4,0($t4)
	bltz $t4,IfNot5
	li $v0,1
	move $a0,$t4
	syscall
	li $v0,4
	li $a0,space
	syscall
	j IfNot6
IfNot5:
	li $v0,4
	li $a0,mine
	syscall
IfNot6:
	addi $t1,$t1,1
	bne $t1,SIZE,Loop11
	li $v0,4
	li $a0,ent
	syscall
	addi $t0,$t0,1
	bne $t0,SIZE,Loop10
	bne $t2,MINE_NUM,IfNot7
	li v0,1
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	addi $sp,$sp,12
	jr $ra
IfNot7:
	li v0,0
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	lw $t3,12($sp)
	lw $t4,16($sp)
	addi $sp,$sp,20
	jr $ra  
#=================Step=================
Step:
	addi $sp,$sp,-20
	sw $t0,0($sp)
	sw $t1,4($sp)
	sw $t2,8($sp)
	sw $t3,12($sp)
	sw $t4,16($sp)
	move $t0,$a0
	move $t1,$a1
	muli $t2,$t0,SIZE
	add $t2,$t2,$t1
	sll $t2,$t2,2
	addu $t3,$t2,GameBroad
	li $t4,1
	sw $t4,0($t3)
	addu $t3,$t2,MineMap
	lw $t3,0($t3)
	li $t4,-1
	bne $t3,$t4,NotMine
	li $v0,1
	j StepReturn
NotMine:
	beq $t3,$zero,NotTouch
	li $v0,0
	j StepReturn
NotTouch:
	sgt $t3,$t0,$zero
	addi $t2,$t0,-1
	muli $t2,$t2,SIZE
	add $t2,$t2,$t1
	sll $t2,$t2,2
	addu $t4,$t2,MineMap
	lw $t4,0($t4)
	sge $t4,$t4,$zero
	and $t3,$t3,$t4
	addu $t4,$t2,GameBroad
	lw $t4,0($t4)
	seq $t4,$t4,$zero
	and $t3,$t3,$t4
	beq $t3,$zero,NotLeft
	addi $t2,$t0,-1
	move $a0,$t2
	move $a2,$t1
	jal Step
NotLeft:
	sle $t3,$t0,BROAD_SIZE
	addi $t2,$t0,1
	muli $t2,$t2,SIZE
	add $t2,$t2,$t1
	sll $t2,$t2,2
	addu $t4,$t2,MineMap
	lw $t4,0($t4)
	sge $t4,$t4,$zero
	and $t3,$t3,$t4
	addu $t4,$t2,GameBroad
	lw $t4,0($t4)
	seq $t4,$t4,$zero
	and $t3,$t3,$t4
	beq $t3,$zero,NotLeft
	addi $t2,$t0,1
	move $a0,$t2
	move $a2,$t1
	jal Step
NotRight:
	sgt $t3,$t1,$zero
	muli $t2,$t0,SIZE
	add $t2,$t2,$t1
	addi $t2,$t2,-1
	sll $t2,$t2,2
	addu $t4,$t2,MineMap
	lw $t4,0($t4)
	sge $t4,$t4,$zero
	and $t3,$t3,$t4
	addu $t4,$t2,GameBroad
	lw $t4,0($t4)
	seq $t4,$t4,$zero
	and $t3,$t3,$t4
	beq $t3,$zero,NotLeft
	addi $t2,$t1,-1
	move $a0,$t0
	move $a2,$t2
	jal Step
NotDown:
	sle $t3,$t1,BROAD_SIZE
	muli $t2,$t2,SIZE
	add $t2,$t2,$t1
	addi $t2,$t2,1
	sll $t2,$t2,2
	addu $t4,$t2,MineMap
	lw $t4,0($t4)
	sge $t4,$t4,$zero
	and $t3,$t3,$t4
	addu $t4,$t2,GameBroad
	lw $t4,0($t4)
	seq $t4,$t4,$zero
	and $t3,$t3,$t4
	beq $t3,$zero,NotLeft
	addi $t2,$t1,1
	move $a0,$t0
	move $a2,$t2
	jal Step
NotUp:
	li $v0,0
StepReturn:
	lw $t0,0($sp)
	lw $t1,4($sp)
	lw $t2,8($sp)
	lw $t3,12($sp)
	lw $t4,16($sp)
	addi $sp,$sp,20
	jr $ra  
#=================DATA=================
.data
	BROAD_SIZE:	.word 8
	MINE_NUM:	.word 10
	SIZE:		.word 10
	MineMap:	.word 	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						
	GameBroad:	.word	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	unopen:		.asciiz "# "
	mine:		.asciiz "X "
	space:		.asciiz " "
	ent:		.asciiz "\n"
	askinput:	.asciiz ">> 請依序輸入座標(X,Y)範圍為 1 ~ 8:  "
	errorinput	.asciiz "*****輸入錯誤，請重新輸入*****\n"
	lose		.asciiz	"\t\tLOSE..."
	win			.asciiz "\t\tWIN~~~"